#!/bin/bash
# .bashrc of Karl J. Obermeyer

# Global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# 3rd Party
if [ -f ~/.sshrc.d/.git-completion.bash ]; then
    . ~/.sshrc.d/.git-completion.bash
elif [ -d ~/git_repos/linux_environment/.sshrc.d/.git-completion.bash ]; then
    . ~/git_repos/linux_environment/.sshrc.d/.git-completion.bash
fi

# Private definitions
if [ -f ~/.bashrc_private ]; then
    . ~/.bashrc_private
elif [ -d ~/Sync/.bashrc_private ]; then
    . ~/Sync/.bashrc_private
fi
if [ -f ~/.sshrc.d/.standard_cognition_rc ]; then
    . ~/.sshrc.d/.standard_cognition_rc
elif [ -d ~/Sync/.sshrc.d/.standard_cognition_rc ]; then
    . ~/Sync/.sshrc.d/.standard_cognition_rc
fi

# Custom command-line utilities
if [ -f ~/.sshrc ]; then
    . ~/.sshrc
elif [ -d ~/git_repos/linux_environment/.sshrc ]; then
    . ~/git_repos/linux_environment/.sshrc
fi
if [ -d ~/.utilities ]; then
    export PATH=$PATH:~/.utilities
elif [ -d ~/git_repos/linux_environment/.utilities ]; then
    export PATH=$PATH:~/git_repos/linux_environment/.utilities
fi

# Private custom command-line utilities
if [ -d ~/.utilities_private ]; then
    export PATH=$PATH:~/.utilities_private
elif [ -d ~/Sync/.utilities_private ]; then
    export PATH=$PATH:~/Sync/.utilities_private
fi

umask 022 # permissions
export HOSTNAME=`/bin/hostname`
export HISTFILESIZE=1000
export EDITOR="emacs"
#lpadmin -d [printer name] # set default printer
export PATH=$PATH:/usr/bin
export PATH=$PATH:/Applications/DOWNLOADS/Doxygen/Doxygen.app/Contents/Resources
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
#export LSCOLORS "fxexcxdxbxfgfdabagacad"
#export TERM=xterm-color
export CLICOLOR=1 # terminal colors
#export LSCOLORS=ExFxCxDxBxegedabagacad
export TERM=xterm-color

# Prompt
#export PS1="\[\033[7;39m\]\h:\[\033[0m\] \w> "
#export PS1="${debian_chroot:+($debian_chroot)}\u@\h:\w\$"
export PS1="\u@\h:\w\$ "
export PS2="> "

# LaTeX
alias lbll="cleaner; latex main.tex; bibtex main; latex main.tex; latex main.tex; make pdf"
alias pbpp="cleaner; pdflatex main.tex; bibtex main; pdflatex main.tex; pdflatex main.tex"
export TEXINPUTS=\
./:\
/usr/local/teTeX/share/texmf//:\
~/lib/texmf/tex//:\
./images//:\
./epsfiles//:\
./fig//:\
./figs//:\
./xfig//:\
/usr/share/texmf-texlive//:\
/usr/share/tex4ht//:\
/usr/share/tex-common//:\
/usr/share/texinfo//:\
/usr/share/texlive-base//:\
/usr/share/texlive-bin//:\
/usr/share/texmf//
#/usr/share/texmf-texlive/tex/latex/base/article.cls
export BSTINPUTS=\
./:\
/usr/local/teTeX/share/texmf/bibtex/bst//:\
~/lib/texmf/bibtex/bst//:\
/usr/share/texmf-texlive/bibtex/bst//
export BIBINPUTS=\
./:\
./bib//:\
~/lib/texmf/bibtex/bib//:\

# ffmpeg: Movie/animation from frames
# 'mm' for 'make movie'
#alias mm='ffmpeg -i frame%04d.png -f avi -r 2 -vcodec mjpeg -qscale 1 output.avi'
alias mm='ffmpeg -i frame%04d.png -f avi -t 20 -vcodec mjpeg -qscale 1 output.avi'
function m4as2mp3s(){
    # Convert all .m4a files in current directory to .mp3 files in subdirectory ./mp3s.
    mkdir -p mp3s
    FILES="./*.m4a"
    #for file in $FILES; do ffmpeg -i $file ./mp3s/${file%.*}.mp3; done
    for file in $FILES; do
	file_in_base=`basename $file` # removes path
	file_out=./mp3s/${file_in_base%.*}.mp3 # add new path
	#ffmpeg -i $file $file_out # bit rate too low
	ffmpeg -i $file -acodec libmp3lame -ab 256k $file_out
    done
}
function mp4s2mp3s(){
    # Convert all .mp4 (video) files in current directory to .mp3 (audio) files
    # in subdirectory ./mp3s.
    mkdir -p mp3s
    FILES="./*.mp4"
    #for file in $FILES; do ffmpeg -i $file ./mp3s/${file%.*}.mp3; done
    for file in $FILES; do
	file_in_base=`basename $file` # removes path
	file_out=./mp3s/${file_in_base%.*}.mp3 # add new path
	#ffmpeg -i $file $file_out # bit rate too low
	ffmpeg -i $file -acodec libmp3lame -ab 256k $file_out
    done
}

# Imagemagick
function crop(){
    # 20x10 would leach 20px border horizontal and 10px border vertical
    convert $1 -trim -bordercolor White -border 5x5 +repage $1
}
function fullcrop(){
    convert $1 -trim $1
    # If you don't want to overwrite original, use this instead
    # convert $1 -trim trimmed_$1
}
function cropallpng(){
    # Call crop on all .png files in current directory
    FILES="./*.png"
    for i in $FILES; do crop $i; done
}
function fullcropallpng(){
    # Call crop on all .png files in current directory
    FILES="./*.png"
    for i in $FILES; do fullcrop $i; done
}

# Dot
function dots2pngs(){
    # Convert all dot files in current directory to png files
    FILES="./*.dot"
    for i in $FILES; do dot -Tpng $i > ${i%.*}.png; done
}

# Python
export PYTHONPATH=$PYTHONPATH:~/.python:~/git_repos
#export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python2.7/dist-packages/RunSnakeRun-2.0.2b1-py2.7.egg/runsnakerun/runsnake.py
export PYTHONSTARTUP=~/.python/startup.py

# For Apache Spark
export JAVA_HOME=$(/usr/libexec/java_home)
export SCALA_HOME=/usr/local/bin/scala
export PATH=$PATH:$SCALA_HOME/bin