#!/usr/bin/env python

'''
Find recursively all instances of a file with a certain name, say foo.bar, in
the current directory tree, and replace each with a copy of the file
./somedir/biz.baz.

::CAUTION:: If a file of the name biz.baz already exists in the same directory
as foo.bar, it will be overwritten.  In the most common use case biz.baz ==
foo.bar, so this is not a problem.

Command-line usage:
$ replace_all_file_occurances ./somedir/biz.baz foo.bar
'''

# Standard
import argparse
import os
import shutil
import time


def main():

    start_time = time.time()

    # Advanced argument access with argparse.
    parser = argparse.ArgumentParser(
            description=__doc__,
            formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        'filename_new_with_path', type=str,
        help='a copy of this file will replace each of the old files')
    parser.add_argument(
        'filename_old', type=str,
        help='all files with this name in current directory '
        'tree will be replaced')
    parser.add_argument(
        '-i', '--interactive', action='store_true', help='interactive mode')
    parser.add_argument(
        '-v', '--verbose', action='store_true', help='verbose output')
    parser.add_argument(
        '-d', '--dry', action='store_true', help='dry run')
    args = parser.parse_args()

    # Find files
    filename_new_path = os.path.dirname(args.filename_new_with_path)
    #filename_new_without_path = os.path.basename(filename_new)
    for dirpath, dirnames, filenames in os.walk('.'):
        for filename in filenames:
            if filename == args.filename_old:
                filename_with_path = os.path.join(dirpath, filename)

                if filename_with_path == args.filename_new_with_path:
                    break

                user_input = 'y'
                if args.interactive:
                    user_input = raw_input(
                        'Replace ' + filename_with_path +
                        ' with a copy of ' + args.filename_new_with_path +
                        ' ? (y/n)')

                if user_input == 'y':
                    if args.verbose:
                        print 'Replacing ' + filename_with_path + \
                            ' with a copy of ' + args.filename_new_with_path
                    if not args.dry:
                        os.remove(filename_with_path)
                        if filename_new_path != dirpath:
                            shutil.copy(args.filename_new_with_path, dirpath)

    print '\nElapsed time =', time.time() - start_time, 's'


if __name__ == "__main__":
    main()
