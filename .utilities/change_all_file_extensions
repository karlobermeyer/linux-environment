#!/usr/bin/env python

'''
Find recursively all files with a certain extension, say .bar, in the current
directory tree, and rename with the extension .foo (replacing .bar).

Command-line usage:
$ change_all_file_extensions .foo .bar
'''

# Standard
import argparse
import os
import shutil
import time


def main():

    start_time = time.time()

    # Advanced argument access with argparse.
    parser = argparse.ArgumentParser(
            description=__doc__,
            formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('extension_new', type=str, help='replaces old extension')
    parser.add_argument('extension_old', type=str, help='replaces new extension')
    parser.add_argument(
        '-i', '--interactive', action='store_true', help='interactive mode')
    parser.add_argument(
        '-v', '--verbose', action='store_true', help='verbose output')
    parser.add_argument(
        '-d', '--dry', action='store_true', help='dry run')
    args = parser.parse_args()

    # Find files
    extension_old_length = len(args.extension_old)
    for dirpath, dirnames, filenames in os.walk('.'):
        for filename in filenames:
            if extension_old_length <= len(filename) and \
                   filename[-extension_old_length:] == args.extension_old:
                filename_with_path = os.path.join(dirpath, filename)
                filename_new = filename[:-extension_old_length] + args.extension_new
                filename_with_path_new = os.path.join(dirpath, filename_new)

                user_input = 'y'
                if args.interactive:
                    user_input = raw_input(
                        'Rename ' + filename_with_path +
                        ' to ' + filename_with_path_new + ' ? (y/n)')

                if user_input == 'y':
                    if args.verbose:
                        print 'Renaming ' + filename_with_path + ' to ' + filename_with_path_new
                    if not args.dry:
                        shutil.move(filename_with_path, filename_with_path_new)

    print '\nElapsed time =', time.time() - start_time, 's'


if __name__ == "__main__":
    main()
