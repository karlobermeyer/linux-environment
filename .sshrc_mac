#!/bin/bash

# 3rd Party
if [ -f ~/.sshrc.d/.git-completion.bash ]; then
    . ~/.sshrc.d/.git-completion.bash
fi


parse_git_branch() {
  # Get current git branch name. Use the return value in expressions with
  # `$(parse_git_branch)`.
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
  #git rev-parse --abbrev-ref HEAD  # Does this alternative always work?
}


export PATH=$PATH:$HOME/phab/arcanist/bin/
# Prompt
#export PS1="\[\033[7;39m\]\h:\[\033[0m\] \w> "
#export PS1="${debian_chroot:+($debian_chroot)}\u@\h:\w\$"
#export PS1="\u@\h:\w\n\$ "
export PS1="\[\033[1;92m\]\u@\h:\[\033[1;96m\]\w\[\033[1;93m\] (\$(parse_git_branch)) \n\[\033[1;37m\]\$\[\e[0m\] "
export PS2="> "


# Misc. aliases
alias l='clear;pwd;echo "--------------------------------"; ls -F1; echo " "'
alias ll='clear;pwd;echo "--------------------------------"; ls -Flh; echo " "'
alias lh='clear;pwd;echo "--------------------------------"; ls -FA1h; echo " "'
alias llh='clear;pwd;echo "--------------------------------"; ls -FAlh; echo " "'
alias ld='clear;pwd;echo "--------------------------------"; ls -d -1 */; echo " "'
alias ldh='clear;pwd;echo "--------------------------------"; ls -d .*/; echo " "'
alias lhead='clear;pwd;echo "--------------------------------"; ls -FAlh | head; echo " "'
alias lpy='clear;pwd;echo "--------------------------------"; ls -F1h *.py; echo " "'
alias llpy='clear;pwd;echo "--------------------------------"; ls -Flh *.py; echo " "'
alias lsh='clear;pwd;echo "--------------------------------"; ls -F1h *.sh; echo " "'
alias llsh='clear;pwd;echo "--------------------------------"; ls -Flh *.sh; echo " "'
alias lpkl='clear;pwd;echo "--------------------------------"; ls -F1h *.pkl; echo " "'
alias llpkl='clear;pwd;echo "--------------------------------"; ls -Flh *.pkl; echo " "'
alias lyaml='clear;pwd;echo "--------------------------------"; ls -F1h *.yaml; echo " "'
alias llyaml='clear;pwd;echo "--------------------------------"; ls -Flh *.yaml; echo " "'
alias ltex='clear;pwd;echo "--------------------------------"; ls -F1h *.tex; echo " "'
alias lltex='clear;pwd;echo "--------------------------------"; ls -Flh *.tex; echo " "'
alias ltxt='clear;pwd;echo "--------------------------------"; ls -F1h *.txt; echo " "'
alias lltxt='clear;pwd;echo "--------------------------------"; ls -Flh *.txt; echo " "'
alias lpng='clear;pwd;echo "--------------------------------"; ls -F1h *.png; echo " "'
alias pkk='pkill -KILL'
alias filecount='find . -type f | wc -l'
alias dus='du -sh * | sort -r' # was sort -h, but changed for mac os x
alias duhm='sudo du -hm --max-depth 1 | sort -nr | head'
alias a='atom'
alias an='atom -n &'
alias e='emacs'
function ero(){
    emacs "$1" --eval '(setq buffer-read-only t)'
}
alias eb='emacs ~/.bashrc &'
function ebro(){
    emacs ~/.bashrc --eval '(setq buffer-read-only t)' &
}
alias ebp='emacs ~/.bashrc_private &'
alias ee='emacs ~/.emacs.el &'
function eero(){
    emacs ~/.emacs.el --eval '(setq buffer-read-only t)' &
}
alias et='emacs ~/.tcshrc &'
alias cleaner='rm -f *~ .*~ *# .*# *.aux *.blg *.log *.dvi *.fot *.o *.do *.db *.mexmaci *.nav *.out *.snm *.toc *.pyc; l'
alias bibcleaner='rm -f *~ .*~ *# .*# *.aux *.blg *.bbl *.log *.dvi *.fot *.o *.do *.db *.mexmaci *.nav *.out *.snm *.toc *.pyc; l'
#
# ::WARNING:: When using any grep aliases that have an ``--include'' flag, must
# use ./ instead of * at the end, e.g.,
# $ grep --include=*.py "blah" ./
function grepn(){
    grep -RHnI --color "$1" ./
}
function grepni(){
    grep -RHinI --color "$1" ./
}
#
function grepsh(){
    grep -RHn --color --include=*.sh "$1" ./
}
function grepshba(){
    grep -RHn -B"$1" -A"$2" --color --include=*.sh "$3" ./
}
#
function grepy(){
    grep -RHn --color --include=*.py --include=*.pyx "$1" ./
}
function grepyba(){
    grep -RHn -B"$1" -A"$2" --color --include=*.py --include=*.pyx "$3" ./
}
#
function greprs(){
    grep -RHn --color --include=*.rs "$1" ./
}
function greprsba(){
    grep -RHn -B"$1" -A"$2" --color --include=*.rs "$3" ./
}
#
function grepc(){
    grep -RHn --include=*.h --include=*.hpp --include=*.c\
     --include=*.cpp --include=*.cc --include=*.C "$1" ./
}
function grepcba(){
    grep -RHn -B"$1" -A"$2" --include=*.h --include=*.hpp --include=*.c\
     --include=*.cpp --include=*.cc --include=*.C "$3" ./
}
#
function grepmd(){
    grep -RHn --color --include=*.md "$1" ./
}
function grepmdba(){
    grep -RHn -B"$1" -A"$2" --color --include=*.md "$3" ./
}
#
function grept(){
    grep -RHn --color --include=*.text --include=*.txt "$1" ./
}
function greptba(){
    grep -RHn -B"$1" -A"$2" --color --include=*.text --include=*.txt "$3" ./
}
function greptex(){
    grep -RHn --color --include=*.tex "$1" ./
}
#
function grepe(){
    grep -l "$1" ./ | xargs emacs &
}
#
function findname(){
    find . -name "*$1*" 2>/dev/null
}
function rpyl(){
    find . -type f \( -name "*.py" -or -name "*.pyx" \) | xargs rpl -R $1 $2
}
alias eogpng='eog *.png &'
function eogpngd(){
    eog $1/*.png &
}
alias sagi='sudo apt-get install'
alias sagupdate='sudo apt-get update'
alias sagupgrade='sudo apt-get upgrade'
alias fm='nautilus . &'
function acroreadn(){
    # Open file in new instance of Adobe Reader
    # acroread 1.pdf & acroread -openInNewInstance 2.pdf
    acroread -openInNewInstance $1 &
}

# Git
alias g='git'
__git_complete g _git
alias tgr='cd ~/git_repos'
alias gb='git branch'
__git_complete gb _git_branch
function gbn(){
    # Make new local branch that tracks local master, and make a remote branch
    # on fork `karl`.
    arc feature $1 # Same as `git checkout -b $1 --track master`?
    git push -u karl $1:$1
}
function gbd(){
    # Delete copies of branch $2 locally and on remote $1.
    git checkout master  # Make sure not on branch while deleting.
    git push $1 --delete $2
    git branch -Dq $2
}
__git_complete gbd _git_branch
function gum(){
    # Update master locally and on fork $1.
    git checkout master
    git pull origin
    git push $1 master:master
}
__git_complete gum _git_branch
#
alias gco='git checkout'
__git_complete gco _git_checkout
function gcot(){
    # Check out and track a branch $2 from remote $1.
    git fetch $1
    git checkout -b $2 --track $1/$2
}
__git_complete gcot _git_checkout
#
alias gfa='git fetch --all'
alias gfp='git fetch --prune'
alias gfap='git fetch --all; git fetch --prune'
# alias gfapp='git fetch --all; git fetch --prune; git pull'
#
alias grh='git reset --hard'
__git_complete grh _git_reset
function grhr(){
    # Reset hard to current branch on remote $1.
    git fetch $1
    git reset --hard $1/$(parse_git_branch)
}
__git_complete grhr _git_reset
#
alias grs='git remote show'
alias gg='git gui &'
alias fixgg='git config --local --unset gui.geometry; git gui &'
alias gka='gitk --all &'
alias grph='git rev-parse HEAD'
#
alias ggca='git gc --aggressive'
function fixlfs(){
  git lfs uninstall
  git reset --hard HEAD
  git lfs install
  git lfs checkout
  echo "Fixed LFS"
}

# SVN
#alias s='svn up; svn commit -m " "; svn up'

# Python
alias py='python'
alias p='python3'
alias ipy='ipython'
alias ipp='ipython --pylab'
alias ipn='ipython notebook --pylab inline'
alias pyclean='find . -name "*.py[co]" -o -name __pycache__ -exec rm -rf {} +'
function spp(){
    DIR=`pwd`
    export PYTHONPATH=~/.python:$DIR
    #export PYTHONPATH=$PYTHONPATH:~/.python:~/git_repos
}
function epp(){
    echo $PYTHONPATH
}
function pt3(){
    python3 -m pytest -v $1
}
